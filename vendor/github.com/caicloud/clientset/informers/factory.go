/*
Copyright 2018 caicloud authors. All rights reserved.
*/

// Code generated by informer-gen. DO NOT EDIT.

package informers

import (
	time "time"

	apiextensions "github.com/caicloud/clientset/informers/apiextensions"
	apiregistration "github.com/caicloud/clientset/informers/apiregistration"
	clever "github.com/caicloud/clientset/informers/clever"
	cnetworking "github.com/caicloud/clientset/informers/cnetworking"
	config "github.com/caicloud/clientset/informers/config"
	dataset "github.com/caicloud/clientset/informers/dataset"
	devops "github.com/caicloud/clientset/informers/devops"
	loadbalance "github.com/caicloud/clientset/informers/loadbalance"
	logging "github.com/caicloud/clientset/informers/logging"
	model "github.com/caicloud/clientset/informers/model"
	orchestration "github.com/caicloud/clientset/informers/orchestration"
	release "github.com/caicloud/clientset/informers/release"
	resource "github.com/caicloud/clientset/informers/resource"
	tenant "github.com/caicloud/clientset/informers/tenant"
	kubernetes "github.com/caicloud/clientset/kubernetes"
	"k8s.io/api/core/v1"
	informers "k8s.io/client-go/informers"
	internalinterfaces "k8s.io/client-go/informers/internalinterfaces"
)

// SharedInformerOption defines the functional option type for SharedInformerFactory.
type SharedInformerOption func(*sharedInformerFactory) *sharedInformerFactory

type sharedInformerFactory struct {
	informers.SharedInformerFactory
	namespace        string
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// WithTweakListOptions sets a custom filter on all listers of the configured SharedInformerFactory.
func WithTweakListOptions(tweakListOptions internalinterfaces.TweakListOptionsFunc) SharedInformerOption {
	return func(factory *sharedInformerFactory) *sharedInformerFactory {
		factory.tweakListOptions = tweakListOptions
		return factory
	}
}

// WithNamespace limits the SharedInformerFactory to the specified namespace.
func WithNamespace(namespace string) SharedInformerOption {
	return func(factory *sharedInformerFactory) *sharedInformerFactory {
		factory.namespace = namespace
		return factory
	}
}

// NewSharedInformerFactory constructs a new instance of sharedInformerFactory for all namespaces.
func NewSharedInformerFactory(client kubernetes.Interface, defaultResync time.Duration) SharedInformerFactory {
	return NewSharedInformerFactoryWithOptions(client, defaultResync)
}

// NewFilteredSharedInformerFactory constructs a new instance of sharedInformerFactory.
// Listers obtained via this SharedInformerFactory will be subject to the same filters
// as specified here.
// Deprecated: Please use NewSharedInformerFactoryWithOptions instead
func NewFilteredSharedInformerFactory(client kubernetes.Interface, defaultResync time.Duration, namespace string, tweakListOptions internalinterfaces.TweakListOptionsFunc) SharedInformerFactory {
	return NewSharedInformerFactoryWithOptions(client, defaultResync, WithNamespace(namespace), WithTweakListOptions(tweakListOptions))
}

// NewSharedInformerFactoryWithOptions constructs a new instance of a SharedInformerFactory with additional options.
func NewSharedInformerFactoryWithOptions(client kubernetes.Interface, defaultResync time.Duration, options ...SharedInformerOption) SharedInformerFactory {
	factory := &sharedInformerFactory{
		namespace: v1.NamespaceAll,
	}

	// Apply all options
	for _, opt := range options {
		factory = opt(factory)
	}

	factory.SharedInformerFactory = informers.NewFilteredSharedInformerFactory(client, defaultResync, factory.namespace, factory.tweakListOptions)
	return factory
}

// SharedInformerFactory provides shared informers for resources in all known
// API group versions.
type SharedInformerFactory interface {
	informers.SharedInformerFactory

	Apiextensions() apiextensions.Interface
	Apiregistration() apiregistration.Interface
	Clever() clever.Interface
	Cnetworking() cnetworking.Interface
	Config() config.Interface
	Dataset() dataset.Interface
	Devops() devops.Interface
	Loadbalance() loadbalance.Interface
	Logging() logging.Interface
	Model() model.Interface
	Orchestration() orchestration.Interface
	Release() release.Interface
	Resource() resource.Interface
	Tenant() tenant.Interface
}

func (f *sharedInformerFactory) Apiextensions() apiextensions.Interface {
	return apiextensions.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Apiregistration() apiregistration.Interface {
	return apiregistration.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Clever() clever.Interface {
	return clever.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Cnetworking() cnetworking.Interface {
	return cnetworking.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Config() config.Interface {
	return config.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Dataset() dataset.Interface {
	return dataset.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Devops() devops.Interface {
	return devops.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Loadbalance() loadbalance.Interface {
	return loadbalance.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Logging() logging.Interface {
	return logging.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Model() model.Interface {
	return model.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Orchestration() orchestration.Interface {
	return orchestration.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Release() release.Interface {
	return release.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Resource() resource.Interface {
	return resource.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Tenant() tenant.Interface {
	return tenant.New(f, f.namespace, f.tweakListOptions)
}
