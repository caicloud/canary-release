/*
Copyright 2019 caicloud authors. All rights reserved.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1beta1

import (
	scheme "github.com/caicloud/clientset/kubernetes/scheme"
	v1beta1 "github.com/caicloud/clientset/pkg/apis/resource/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// NodeClaimsGetter has a method to return a NodeClaimInterface.
// A group's client should implement this interface.
type NodeClaimsGetter interface {
	NodeClaims() NodeClaimInterface
}

// NodeClaimInterface has methods to work with NodeClaim resources.
type NodeClaimInterface interface {
	Create(*v1beta1.NodeClaim) (*v1beta1.NodeClaim, error)
	Update(*v1beta1.NodeClaim) (*v1beta1.NodeClaim, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1beta1.NodeClaim, error)
	List(opts v1.ListOptions) (*v1beta1.NodeClaimList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.NodeClaim, err error)
	NodeClaimExpansion
}

// nodeClaims implements NodeClaimInterface
type nodeClaims struct {
	client rest.Interface
}

// newNodeClaims returns a NodeClaims
func newNodeClaims(c *ResourceV1beta1Client) *nodeClaims {
	return &nodeClaims{
		client: c.RESTClient(),
	}
}

// Get takes name of the nodeClaim, and returns the corresponding nodeClaim object, and an error if there is any.
func (c *nodeClaims) Get(name string, options v1.GetOptions) (result *v1beta1.NodeClaim, err error) {
	result = &v1beta1.NodeClaim{}
	err = c.client.Get().
		Resource("nodeclaims").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of NodeClaims that match those selectors.
func (c *nodeClaims) List(opts v1.ListOptions) (result *v1beta1.NodeClaimList, err error) {
	result = &v1beta1.NodeClaimList{}
	err = c.client.Get().
		Resource("nodeclaims").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested nodeClaims.
func (c *nodeClaims) Watch(opts v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Resource("nodeclaims").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a nodeClaim and creates it.  Returns the server's representation of the nodeClaim, and an error, if there is any.
func (c *nodeClaims) Create(nodeClaim *v1beta1.NodeClaim) (result *v1beta1.NodeClaim, err error) {
	result = &v1beta1.NodeClaim{}
	err = c.client.Post().
		Resource("nodeclaims").
		Body(nodeClaim).
		Do().
		Into(result)
	return
}

// Update takes the representation of a nodeClaim and updates it. Returns the server's representation of the nodeClaim, and an error, if there is any.
func (c *nodeClaims) Update(nodeClaim *v1beta1.NodeClaim) (result *v1beta1.NodeClaim, err error) {
	result = &v1beta1.NodeClaim{}
	err = c.client.Put().
		Resource("nodeclaims").
		Name(nodeClaim.Name).
		Body(nodeClaim).
		Do().
		Into(result)
	return
}

// Delete takes name of the nodeClaim and deletes it. Returns an error if one occurs.
func (c *nodeClaims) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Resource("nodeclaims").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *nodeClaims) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	return c.client.Delete().
		Resource("nodeclaims").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched nodeClaim.
func (c *nodeClaims) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.NodeClaim, err error) {
	result = &v1beta1.NodeClaim{}
	err = c.client.Patch(pt).
		Resource("nodeclaims").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
