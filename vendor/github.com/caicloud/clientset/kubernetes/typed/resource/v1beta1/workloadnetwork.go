/*
Copyright 2019 caicloud authors. All rights reserved.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1beta1

import (
	scheme "github.com/caicloud/clientset/kubernetes/scheme"
	v1beta1 "github.com/caicloud/clientset/pkg/apis/resource/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// WorkloadNetworksGetter has a method to return a WorkloadNetworkInterface.
// A group's client should implement this interface.
type WorkloadNetworksGetter interface {
	WorkloadNetworks(namespace string) WorkloadNetworkInterface
}

// WorkloadNetworkInterface has methods to work with WorkloadNetwork resources.
type WorkloadNetworkInterface interface {
	Create(*v1beta1.WorkloadNetwork) (*v1beta1.WorkloadNetwork, error)
	Update(*v1beta1.WorkloadNetwork) (*v1beta1.WorkloadNetwork, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1beta1.WorkloadNetwork, error)
	List(opts v1.ListOptions) (*v1beta1.WorkloadNetworkList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.WorkloadNetwork, err error)
	WorkloadNetworkExpansion
}

// workloadNetworks implements WorkloadNetworkInterface
type workloadNetworks struct {
	client rest.Interface
	ns     string
}

// newWorkloadNetworks returns a WorkloadNetworks
func newWorkloadNetworks(c *ResourceV1beta1Client, namespace string) *workloadNetworks {
	return &workloadNetworks{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the workloadNetwork, and returns the corresponding workloadNetwork object, and an error if there is any.
func (c *workloadNetworks) Get(name string, options v1.GetOptions) (result *v1beta1.WorkloadNetwork, err error) {
	result = &v1beta1.WorkloadNetwork{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("workloadnetworks").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of WorkloadNetworks that match those selectors.
func (c *workloadNetworks) List(opts v1.ListOptions) (result *v1beta1.WorkloadNetworkList, err error) {
	result = &v1beta1.WorkloadNetworkList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("workloadnetworks").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested workloadNetworks.
func (c *workloadNetworks) Watch(opts v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("workloadnetworks").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a workloadNetwork and creates it.  Returns the server's representation of the workloadNetwork, and an error, if there is any.
func (c *workloadNetworks) Create(workloadNetwork *v1beta1.WorkloadNetwork) (result *v1beta1.WorkloadNetwork, err error) {
	result = &v1beta1.WorkloadNetwork{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("workloadnetworks").
		Body(workloadNetwork).
		Do().
		Into(result)
	return
}

// Update takes the representation of a workloadNetwork and updates it. Returns the server's representation of the workloadNetwork, and an error, if there is any.
func (c *workloadNetworks) Update(workloadNetwork *v1beta1.WorkloadNetwork) (result *v1beta1.WorkloadNetwork, err error) {
	result = &v1beta1.WorkloadNetwork{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("workloadnetworks").
		Name(workloadNetwork.Name).
		Body(workloadNetwork).
		Do().
		Into(result)
	return
}

// Delete takes name of the workloadNetwork and deletes it. Returns an error if one occurs.
func (c *workloadNetworks) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("workloadnetworks").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *workloadNetworks) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("workloadnetworks").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched workloadNetwork.
func (c *workloadNetworks) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.WorkloadNetwork, err error) {
	result = &v1beta1.WorkloadNetwork{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("workloadnetworks").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
