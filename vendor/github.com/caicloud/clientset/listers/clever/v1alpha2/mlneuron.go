/*
Copyright 2019 caicloud authors. All rights reserved.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "github.com/caicloud/clientset/pkg/apis/clever/v1alpha2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MLNeuronLister helps list MLNeurons.
type MLNeuronLister interface {
	// List lists all MLNeurons in the indexer.
	List(selector labels.Selector) (ret []*v1alpha2.MLNeuron, err error)
	// MLNeurons returns an object that can list and get MLNeurons.
	MLNeurons(namespace string) MLNeuronNamespaceLister
	MLNeuronListerExpansion
}

// mLNeuronLister implements the MLNeuronLister interface.
type mLNeuronLister struct {
	indexer cache.Indexer
}

// NewMLNeuronLister returns a new MLNeuronLister.
func NewMLNeuronLister(indexer cache.Indexer) MLNeuronLister {
	return &mLNeuronLister{indexer: indexer}
}

// List lists all MLNeurons in the indexer.
func (s *mLNeuronLister) List(selector labels.Selector) (ret []*v1alpha2.MLNeuron, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.MLNeuron))
	})
	return ret, err
}

// MLNeurons returns an object that can list and get MLNeurons.
func (s *mLNeuronLister) MLNeurons(namespace string) MLNeuronNamespaceLister {
	return mLNeuronNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MLNeuronNamespaceLister helps list and get MLNeurons.
type MLNeuronNamespaceLister interface {
	// List lists all MLNeurons in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha2.MLNeuron, err error)
	// Get retrieves the MLNeuron from the indexer for a given namespace and name.
	Get(name string) (*v1alpha2.MLNeuron, error)
	MLNeuronNamespaceListerExpansion
}

// mLNeuronNamespaceLister implements the MLNeuronNamespaceLister
// interface.
type mLNeuronNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MLNeurons in the indexer for a given namespace.
func (s mLNeuronNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.MLNeuron, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.MLNeuron))
	})
	return ret, err
}

// Get retrieves the MLNeuron from the indexer for a given namespace and name.
func (s mLNeuronNamespaceLister) Get(name string) (*v1alpha2.MLNeuron, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("mlneuron"), name)
	}
	return obj.(*v1alpha2.MLNeuron), nil
}
