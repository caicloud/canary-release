/*
Copyright 2018 caicloud authors. All rights reserved.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/caicloud/clientset/pkg/apis/microservice/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SpringcloudLister helps list Springclouds.
type SpringcloudLister interface {
	// List lists all Springclouds in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Springcloud, err error)
	// Springclouds returns an object that can list and get Springclouds.
	Springclouds(namespace string) SpringcloudNamespaceLister
	SpringcloudListerExpansion
}

// springcloudLister implements the SpringcloudLister interface.
type springcloudLister struct {
	indexer cache.Indexer
}

// NewSpringcloudLister returns a new SpringcloudLister.
func NewSpringcloudLister(indexer cache.Indexer) SpringcloudLister {
	return &springcloudLister{indexer: indexer}
}

// List lists all Springclouds in the indexer.
func (s *springcloudLister) List(selector labels.Selector) (ret []*v1alpha1.Springcloud, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Springcloud))
	})
	return ret, err
}

// Springclouds returns an object that can list and get Springclouds.
func (s *springcloudLister) Springclouds(namespace string) SpringcloudNamespaceLister {
	return springcloudNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SpringcloudNamespaceLister helps list and get Springclouds.
type SpringcloudNamespaceLister interface {
	// List lists all Springclouds in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Springcloud, err error)
	// Get retrieves the Springcloud from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Springcloud, error)
	SpringcloudNamespaceListerExpansion
}

// springcloudNamespaceLister implements the SpringcloudNamespaceLister
// interface.
type springcloudNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Springclouds in the indexer for a given namespace.
func (s springcloudNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Springcloud, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Springcloud))
	})
	return ret, err
}

// Get retrieves the Springcloud from the indexer for a given namespace and name.
func (s springcloudNamespaceLister) Get(name string) (*v1alpha1.Springcloud, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("springcloud"), name)
	}
	return obj.(*v1alpha1.Springcloud), nil
}
