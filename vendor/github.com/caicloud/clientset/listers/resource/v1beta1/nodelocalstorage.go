/*
Copyright 2019 caicloud authors. All rights reserved.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/caicloud/clientset/pkg/apis/resource/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NodeLocalStorageLister helps list NodeLocalStorages.
type NodeLocalStorageLister interface {
	// List lists all NodeLocalStorages in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.NodeLocalStorage, err error)
	// Get retrieves the NodeLocalStorage from the index for a given name.
	Get(name string) (*v1beta1.NodeLocalStorage, error)
	NodeLocalStorageListerExpansion
}

// nodeLocalStorageLister implements the NodeLocalStorageLister interface.
type nodeLocalStorageLister struct {
	indexer cache.Indexer
}

// NewNodeLocalStorageLister returns a new NodeLocalStorageLister.
func NewNodeLocalStorageLister(indexer cache.Indexer) NodeLocalStorageLister {
	return &nodeLocalStorageLister{indexer: indexer}
}

// List lists all NodeLocalStorages in the indexer.
func (s *nodeLocalStorageLister) List(selector labels.Selector) (ret []*v1beta1.NodeLocalStorage, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.NodeLocalStorage))
	})
	return ret, err
}

// Get retrieves the NodeLocalStorage from the index for a given name.
func (s *nodeLocalStorageLister) Get(name string) (*v1beta1.NodeLocalStorage, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("nodelocalstorage"), name)
	}
	return obj.(*v1beta1.NodeLocalStorage), nil
}
