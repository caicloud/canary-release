/*
Copyright 2019 caicloud authors. All rights reserved.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/caicloud/clientset/pkg/apis/serving/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SceneLister helps list Scenes.
type SceneLister interface {
	// List lists all Scenes in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Scene, err error)
	// Scenes returns an object that can list and get Scenes.
	Scenes(namespace string) SceneNamespaceLister
	SceneListerExpansion
}

// sceneLister implements the SceneLister interface.
type sceneLister struct {
	indexer cache.Indexer
}

// NewSceneLister returns a new SceneLister.
func NewSceneLister(indexer cache.Indexer) SceneLister {
	return &sceneLister{indexer: indexer}
}

// List lists all Scenes in the indexer.
func (s *sceneLister) List(selector labels.Selector) (ret []*v1alpha1.Scene, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Scene))
	})
	return ret, err
}

// Scenes returns an object that can list and get Scenes.
func (s *sceneLister) Scenes(namespace string) SceneNamespaceLister {
	return sceneNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SceneNamespaceLister helps list and get Scenes.
type SceneNamespaceLister interface {
	// List lists all Scenes in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Scene, err error)
	// Get retrieves the Scene from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Scene, error)
	SceneNamespaceListerExpansion
}

// sceneNamespaceLister implements the SceneNamespaceLister
// interface.
type sceneNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Scenes in the indexer for a given namespace.
func (s sceneNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Scene, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Scene))
	})
	return ret, err
}

// Get retrieves the Scene from the indexer for a given namespace and name.
func (s sceneNamespaceLister) Get(name string) (*v1alpha1.Scene, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("scene"), name)
	}
	return obj.(*v1alpha1.Scene), nil
}
